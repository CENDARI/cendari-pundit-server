/*
 * Copyright (c) 2013 Net7 SRL, <http://www.netseven.it/>
 * 
 * This file is part of Pundit: Annonation Server.
 * 
 * Pundit: Annonation Server is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Pundit: Annonation Server is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Pundit: Annonation Server.  If not, see <http ://www.gnu.org/licenses/>.
 *
 * See LICENSE.TXT or visit <http://thepund.it> for the full text of the license.
 */

package eu.semlibproject.annotationserver.models;

import eu.semlibproject.annotationserver.managers.ConfigManager;
import eu.semlibproject.annotationserver.managers.UtilsManager;
import eu.semlibproject.annotationserver.repository.OntologyHelper;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import org.apache.commons.lang3.StringUtils;

/**
 * The main abstract class for the Notebook Model
 * 
 * @author Michele Nucci
 */
public class Notebook {
    
    // Notebook ID
    private String id = null;
    
    // Notebook URI
    private String notebookURI = null;
    
    // Notebook name
    private String name = null;
    
    // Creation date
    private String creationDate = null;
    
    // Modified date
    private String modifiedDate = null;
        
    // Owner
    private User owner = null;
    
    
    /**
     * Default constructor
     */
    private Notebook() {        
    }
    
    
    /**
     * Constructor
     * 
     * @param notebookName  the name of the notebook to create. If <code>null</code> the notebook
     *                      will be created using an autogenerated name.
     * 
     * @throws NoSuchAlgorithmException
     * @throws UnsupportedEncodingException 
     */
    private Notebook(User user, String notebookName) throws NoSuchAlgorithmException, UnsupportedEncodingException {
                        
        this.creationDate = UtilsManager.getInstance().getDate(true);
        this.owner = user;
        
        if (StringUtils.isNotBlank(notebookName)) {
            this.name = notebookName;
        } else {
            this.name = "Notebook " + UtilsManager.getInstance().getDate(false);        
        }
                
        String userID = user.getUserIDasURI();      

        // Compute the notebook ID
        String hashType = ConfigManager.getInstance().getHASHAlgorithmName();
        this.id = UtilsManager.getInstance().computeHashWithDigest( (userID + this.name + this.creationDate), hashType);
        
        this.notebookURI = OntologyHelper.SWN_NAMESPACE + this.id;

    }    
        
    
    /**
     * Create a new Notebook object with a given name. If the name is not specified, the notebook
     * will be create using an auto-generated name. This method will also computed and set 
     * the notebook ID and the notebook URI.
     * 
     * @param notebookName  the name of the notebook to create
     * @return              a new Notebook object
     * 
     * @throws NoSuchAlgorithmException
     * @throws UnsupportedEncodingException 
     */
    public static Notebook createNewNotebook(User user, String notebookName) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        return new Notebook(user, notebookName);                
    }
   
    
    /**
     * Get an empty notebook object
     * 
     * @return a new empty Notebook object
     */
    public static Notebook getEmptyNotebookObject() {        
        return new Notebook();        
    }

    
    /**
     * Get the full notebook URI given a valid notebook ID
     * 
     * @param notebookID  the notebook ID
     * @return            the full notebook URI    
     */
    public static String getURIFromID(String notebookID) {
        return OntologyHelper.SWN_NAMESPACE +  notebookID;
    }

    
    /**
     * Set the notebook id. Starting from the id, this methods also set
     * the notebookURI.
     * 
     * @param id    the annotation id
     */ 
    public void setID(String id) {
        if (StringUtils.isNotBlank(id)) {
            this.id = id;
            this.notebookURI = Notebook.getURIFromID(id);            
        }
    }
    
    
    /**
     * Set the notebook's name.
     * 
     * @param notebookName the name of the notebook
     */
    public void setName(String notebookName) {
        if (StringUtils.isNotBlank(notebookName)) {
            this.name = notebookName;
        }
    }
    
    
    /**
     * Se the modified date for this notebook.
     * 
     * @param modifiedDate the notebook modified date
     */
    public void setModifiedDate(String modifiedDate) {
        if (StringUtils.isNotBlank(modifiedDate)) {
            this.modifiedDate = modifiedDate;
        }
    }
    
     
    /**
     * Get the full Notebook URI given its ID
     * 
     * @param notebookID    the notebook ID
     * @return              the full notebook URI
     */
    public String getNotebookURIFromID(String notebookID) {
        return OntologyHelper.SWN_NAMESPACE + notebookID;
    }

    
    // Getter methods =========================
    public String getID() {
        return this.id;
    }
    
    public String getName() {
        return this.name;
    }
    
    public String getCreationDate() {
        return this.creationDate;
    }
    
    public String getModifiedDate() {
        return this.modifiedDate;
    }
    
    public String getURI() {
        return this.notebookURI;
    }
    
    public User getOwner() {
        return this.owner;
    }
    
    public void setOwner(User user) {
        if (user != null) {
            this.owner = user;
        }
    }
}
